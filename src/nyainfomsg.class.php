<?php
class nyainfomsg {
    public $imsg = array(
        /*
        ABBCCDD
        A: 1成功 2失败
        BB: 模块，例如「安全类」
        CC: 错误类型
        DD: 详细错误
        */
        // A=1 : 操作成功执行
        /// A=1\BB=00 : 通用成功类型
        //// A=1\BB=00\CC=00 : 通用成功
        ///// A=1\BB=00\CC=00\DD=00 :
        1000000 => '执行成功。',
        /// A=1\BB=01 : 数据库类
        //// A=1\BB=01\CC=00 : 数据库相关
        ///// A=1\BB=01\CC=00\DD=00 :
        1010000 => 'SQL语句成功执行。',
        ///// A=1\BB=01\CC=00\DD=01 :
        1010001 => 'SQL语句成功执行，但没有查询到数据。',
        // A=2 : 操作出现问题
        /// A=2\BB=00 : 通用
        //// A=2\BB=00\CC=00 : 未知问题
        ///// A=2\BB=00\CC=00\DD=00 :
        2000000 => '内部错误：出现未知错误。',
        //// A=2\BB=00\CC=01 : 参数相关
        ///// A=2\BB=00\CC=01\DD=00 :
        2000100 => '内部错误：没有参数。',
        ///// A=2\BB=00\CC=01\DD=01 :
        2000101 => '内部错误：需要更多参数。',
        ///// A=2\BB=00\CC=01\DD=02 :
        2000102 => '内部错误：参数无效。',
        ///// A=2\BB=00\CC=01\DD=03 :
        2000103 => '内部错误：不支持的提交方式。',
        /// A=2\BB=01 : 数据库类
        //// A=2\BB=01\CC=01 : MySQL 数据库连接
        ///// A=2\BB=01\CC=01\DD=00 :
        2010100 => '内部错误：未能连接到数据库。',
        ///// A=2\BB=01\CC=01\DD=01 :
        2010101 => '内部错误：数据库错误。',
        ///// A=2\BB=01\CC=01\DD=02 :
        2010102 => '内部错误：数据库未能返回正确的数据。',
        ///// A=2\BB=01\CC=01\DD=03 :
        2010103 => '内部错误：缺少数据库配置。',
        //// A=2\BB=01\CC=02 : MySQL 数据库非预期数据
        ///// A=2\BB=01\CC=02\DD=00 :
        2010200 => '内部错误：查询数据量超出预期',
        //// A=2\BB=01\CC=02 : Redis 数据库连接
        ///// A=2\BB=01\CC=02\DD=00 :
        2010200 => '内部错误：Redis 数据库插件初始化失败',
        ///// A=2\BB=01\CC=02\DD=01 :
        2010201 => '内部错误：Redis 数据库连接失败',
        ///// A=2\BB=01\CC=02\DD=02 :
        2010202 => '内部错误：Redis 数据库认证失败',
        /// A=2\BB=02 : 安全类
        //// A=2\BB=02\CC=01 : 字符串规则检查
        ///// A=2\BB=02\CC=01\DD=00 :
        2020100 => '错误：无效字符串。',
        ///// A=2\BB=02\CC=01\DD=01 :
        2020101 => '错误：字符格式不正确。',
        ///// A=2\BB=02\CC=01\DD=02 :
        2020102 => '内部错误：SQL语句不正确。',
        ///// A=2\BB=02\CC=01\DD=03 :
        2020103 => '错误：不应包含HTML代码。',
        //// A=2\BB=02\CC=02 : 字符串格式检查
        ///// A=2\BB=02\CC=02\DD=01 :
        2020201 => '错误：不是有效的电子邮件地址。',
        ///// A=2\BB=02\CC=02\DD=02 :
        2020202 => '错误：不是有效的 IPv4 地址。',
        ///// A=2\BB=02\CC=02\DD=03 :
        2020203 => '错误：不是有效的 IPv6 地址。',
        ///// A=2\BB=02\CC=02\DD=04 :
        2020204 => '错误：不是有效的整数数字。',
        ///// A=2\BB=02\CC=02\DD=05 :
        2020205 => '错误：不是有效的中国电话号码。',
        ///// A=2\BB=02\CC=02\DD=06 :
        2020206 => '错误：不是有效的邮箱地址或中国电话号码。',
        ///// A=2\BB=02\CC=02\DD=07 :
        2020207 => '错误：不受支持的电子邮件地址。',
        //// A=2\BB=02\CC=03 : 合规性检查
        ///// A=2\BB=02\CC=03\DD=00 :
        2020300 => '错误：包含违禁词汇。',
        ///// A=2\BB=02\CC=03\DD=01 :
        2020301 => '内部错误：违禁词汇数据库设置不正确。',
        ///// A=2\BB=02\CC=03\DD=02 :
        2020302 => '内部错误：违禁词汇文件加载失败。',
        //// A=2\BB=02\CC=04 : 加密通信和IP验证
        ///// A=2\BB=02\CC=04\DD=00 :
        2020400 => '内部错误：不正确的参数',
        ///// A=2\BB=02\CC=04\DD=01 :
        2020401 => '内部错误：此应用不可用',
        ///// A=2\BB=02\CC=04\DD=02 :
        2020402 => '内部错误：无法验证IP地址',
        ///// A=2\BB=02\CC=04\DD=03 :
        2020403 => '错误：IP地址处于封禁状态',
        ///// A=2\BB=02\CC=04\DD=04 :
        2020404 => '内部错误：写入历史记录失败',
        ///// A=2\BB=02\CC=04\DD=05 :
        2020405 => '内部错误：重置加密传输失败',
        ///// A=2\BB=02\CC=04\DD=06 :
        2020406 => '内部错误：创建加密过程失败',
        ///// A=2\BB=02\CC=04\DD=07 :
        2020407 => '错误：访问过于频繁',
        ///// A=2\BB=02\CC=04\DD=08 :
        2020408 => '内部错误：用于解密的参数不正确',
        ///// A=2\BB=02\CC=04\DD=09 :
        2020409 => '内部错误：apptoken不正确',
        ///// A=2\BB=02\CC=04\DD=10 :
        2020410 => '内部错误：json解析失败',
        ///// A=2\BB=02\CC=04\DD=11 :
        2020411 => '内部错误：加密json解析失败',
        ///// A=2\BB=02\CC=04\DD=12 :
        2020412 => '错误：客户端版本不匹配',
        //// A=2\BB=02\CC=05 : 验证码
        ///// A=2\BB=02\CC=05\DD=01 :
        2020501 => '错误：验证码检查失败',
        ///// A=2\BB=02\CC=05\DD=02 :
        2020502 => '错误：验证码超时，再试一次',
        ///// A=2\BB=02\CC=05\DD=03 :
        2020503 => '错误：验证码不匹配，再试一次',
        /// A=2\BB=03 : 验证信息问题
        //// A=2\BB=03\CC=01 : 密码
        ///// A=2\BB=03\CC=01\DD=00 :
        2030200 => '错误：密码只能包括指定的字符',
        ///// A=2\BB=03\CC=01\DD=01 :
        2030201 => '错误：密码不够复杂',
        ///// A=2\BB=03\CC=01\DD=02 :
        2030202 => '错误：密码长度不符合要求',
        //// A=2\BB=03\CC=02 : 电子邮件
        ///// A=2\BB=03\CC=02\DD=00 :
        2030200 => '内部错误：邮件发送失败',
        ///// A=2\BB=03\CC=02\DD=01 :
        2030201 => '内部错误：邮件发送历史记录存储失败',
        /// A=2\BB=04 : 用户账户操作
        //// A=2\BB=04\CC=01 : 用户注册
        ///// A=2\BB=04\CC=01\DD=00 :
        2040100 => '内部错误：检查是否已有登录凭据失败',
        ///// A=2\BB=04\CC=01\DD=01 :
        2040101 => '内部错误：检查到多个重复的凭据',
        ///// A=2\BB=04\CC=01\DD=02 :
        2040102 => '错误：输入的登录凭据已经存在',
        ///// A=2\BB=04\CC=01\DD=03 :
        2040103 => '错误：不允许使用这种方式注册',
        ///// A=2\BB=04\CC=01\DD=04 :
        2040104 => '错误：电子邮件地址太长',
        ///// A=2\BB=04\CC=01\DD=05 :
        2040105 => '错误：昵称太长',
        ///// A=2\BB=04\CC=01\DD=06 :
        2040106 => '内部错误：生成用户编号没有成功',
        //// A=2\BB=04\CC=2 : 用户查询
        ///// A=2\BB=04\CC=02\DD=00 :
        2040200 => '内部错误：查询用户是否存在没有成功',
    );
    /**
     * @description: 创建异常信息提示JSON
     * @param Int msgmode 错误信息输出方式：0返回空，1返回JSON
     * @param String msgmode 输入 totp secret 而不是数字的话，会用此 secret 加密并返回。
     * @param Int code 错误代码
     * @param String str 附加错误信息
     * @param String totpsecret 加密用secret（不加则自动）
     * @return String 返回由 msgmode 设置的 null / json / 加密 json
     */
    function m($msgmode = 0,$code = 2000000,$str = "") {
        if (is_numeric($msgmode) && $msgmode == 0) return null;
        $returnarr = array(
            "code" => $code,
            "msg" => $this->imsg[$code],
            "info" => $str
        );
        if (is_numeric($msgmode) && $msgmode == 1) {
            return json_encode($returnarr);
        } else {
            global $nlcore;
            return $nlcore->safe->encryptargv($returnarr,$msgmode);
        }
    }
    /**
     * @description: 返回信息，或抛出403错误，结束程序
     * @param Int code 错误代码
     * @param String totpsecret 加密用secret（可选，不加则明文返回）
     * @param String str 附加错误信息
     * @param Bool showmsg 是否显示错误信息（否则直接403）
     */
    function stopmsg($code=null,$totpsecret=null,$str="",$showmsg=true) {
        if ($code && $showmsg > 0) {
            global $nlcore;
            $msgmode = $totpsecret ? $totpsecret : 1;
            $json = $this->m($msgmode,$code,$str,$totpsecret);
            header('Content-Type:application/json;charset=utf-8');
            echo $json;
        } else {
            header('HTTP/1.1 403 Forbidden');
        }
        die();
    }
    function __destruct() {
        $this->imsg = null;
        unset($this->imsg);
    }
}
?>
